<?php    //initializations	spl_autoload_register(		function($class){			require_once'../../classes/'.$class.'.php';		}	);	session_start(Config::get('session/options'));	//end of initializatons    require_once '../../libraries/vendor/autoload.php';    use PhpOffice\PhpSpreadsheet\IOFactory as IOObj;    $mgt = new Management();    $staff = new Staff();    $std = new Student();    $user = null;    $message='';    if($mgt->isRemembered()){        $user = $mgt;    }    if($staff->isRemembered()){        $user = $staff;    }    	if(empty($user)){ //ensure user is legally logged in            Redirect::to('index.php'); //redirect to exam home page	}            header("Content-Type: application/json; charset=UTF-8");    if(Input::submitted()&& Token::check(Input::get('token'))){        $examId = Utility::escape(Input::get('examid'));        //validate file        $msg='';        $val = new Validation();        $fileUploaded = false;        if(!$val->checkFile([            'uploadedFile'=>[                'name'=>'Uploaded File',                'required'=>true,                'maxSize'=>5000,                'extension'=>['xlsx','xls']            ]        ])){             foreach($val->errors() as $error){                 $msg.=$error.'<br/>';             }        }else{                       $fileHandler = new File('uploadedFile');            $uploadPath = '../uploads/exam/';            $destination = $uploadPath.$examId.'.'.$fileHandler->extension();            $fileHandler->move($destination);            $fileUploaded = true;                        $ext = IOObj::identify($destination); //identify the extension of the file            $reader = IOObj::createReader($ext); //creates a reader for the identified extension            $reader->getReadDataOnly(); //set the reader to read data only ignoring the data formatting            $spreadsheet = $reader->load($destination); //loads a spreadsheet            $exam = new Exam();            $examDetails = $exam->getDetails($examId);            if(empty($examDetails)){                 $msg.='Exam do not exist';            }else{                $lastRow = ($examDetails->no_qtn_added) + 1;                $valArray = $spreadsheet->getActiveSheet()->rangeToArray('A2:G'.$lastRow,null,false,false,true); //returns the activesheet of the spreadsheet                $allowedType = [1,2,3,4,5];                $orderArray=[]; //to store answer_order for each question                $markArray=[]; //to store mark for each question                for($i=2;$i<=$lastRow;$i++){                     $type = $valArray[$i]['A'];                     if(!isset($type) || !Utility::noScript($type)){ //validating type                         $msg.='Cell A'.$i.' is required<br>';                     }else{                         if(!in_array($type, $allowedType)){ //validating type                            $msg.='Only values of 1,2,3,4,5 are allowed at Cell A'.$i.'<br>';                          }else{                               $qtn = $valArray[$i]['B'];                               if(!isset($qtn) || !Utility::noScript($qtn)){                                  $msg.='Cell B'.$i.' is required<br>';                                }else{                                    if($type === 3 && !preg_match('/_{2,}/', $qtn)){                                         $msg.="German questions must have '__'s at Cell B".$i.' <br>';                                     }else{                                       //validating options                                        $opt = $valArray[$i]['C'];                                        if(!isset($opt) && ($type===1 || $type===4) || !Utility::noScript($opt)){ //validating options                                            $msg.='Cell C'.$i.' is required<br>';                                        }else{                                            if(($type===1 || $type===4) && count(explode('//', $opt))!==4){                                                 $msg.='Cell C'.$i.' requires 4 options<br>';                                            }else{                                                $ans = $valArray[$i]['D'];                                                if(!isset($ans) || !Utility::noScript($ans)){ //validating answers                                                    $msg.='Cell D'.$i.' is required<br>';                                                }else{                                                    $ansCount = count(explode('//', $ans)); //store the number of answers                                                    if($type === 2 && ($ans !== 1 && $ans !==0)){                                                         $msg.='Only values of 1 or 2 is allowed at Cell D'.$i.'<br>';                                                    }else if($type === 3 && preg_match_all('/_{2,}/',$qtn)!== $ansCount){                                                         $msg.='The number of answers at cell D'.$i.' must be equal to the number of "__" at cell B'.$i.'<br>';                                                    }else{                                                        $psg = $valArray[$i]['E'];                                                        if(!Utility::noScript($psg)){                                                            $msg.='invalid characters present in Cell E'.$i;                                                        }                                                        $ord = $valArray[$i]['F'];                                                        if($ord !== 1){                                                            $ord = false; //instantiate answer order to 0(false) as long as it is not set to 1                                                        }else{                                                            $ord = true;                                                        }                                                        $orderArray[''.$i.''] = $ord;                                                        $mark = $valArray[$i]['G'];                                                        $mark = (int)$mark;                                                        $markArray[''.$i.''] = $mark;                                                                                                          }                                                }                                            }                                        }                                    }                               }                          }                     }                 }            }                   }                if(empty($msg)){//confirm that there is no error            $db = DB::get_instance();//             echo 'Type: '.$valArray[$i]['A'].'<br>'; //         echo 'Question: '.$valArray[$i]['B'].'<br>'; //         echo 'Options: '.$valArray[$i]['C'].'<br>'; //         echo 'Answers: '.$valArray[$i]['D'].'<br>'; //         echo 'Passage: '.$valArray[$i]['E'].'<br>'; //         echo 'Answer in order: '.$valArray[$i]['F'].'<br>';//         echo 'mark: '.$valArray[$i]['G'].'<br>';                                     /*delete questions that exist for that exam so reuploading will look as if it is overwritten*/            $qtnClass = new Question();            $qtnClass->deleteAll($examId);                                    $answerInOrder = null;            $i = 2;    //initialize counter to the second row in the sheet which is the first row for data entry in the uploaded excel file            //the switch block below formats the datas to make it ready for insertion into the questiion table            formatQuestion($i);            $db->query('insert into ex_question(exam_id, qtn, type, options, answers, answer_order, mark, passage) values(?,?,?,?,?,?,?,?)',[$examId,$question,$type,$options,$answer,$answerInOrder,$mark,$passage]);            for($i=3;$i<=$lastRow;$i++){                formatQuestion($i);                //requery the database with different values                $db->requery([$examId,$question,$type,$options,$answer,$answerInOrder,$mark,$passage]);            }                                                                               echo json_encode(['success'=>true,'token'=>Token::generate()]);        }else{            echo json_encode(['success'=>false,'message'=>$msg,'token'=>Token::generate()]);        }                //delete the excel file         if($fileUploaded){             unlink($destination);        }           }                //this part contains functions        function formatQuestion($i){            global $type, $question, $valArray, $options, $answer, $passage, $answerInOrder, $mark, $markArray, $orderArray, $passage;            $type = $valArray[$i]['A'];             switch ($type){                case 1:                    //formatting questions                    $question = $valArray[$i]['B'];                    //formatting options                    $opt = explode('//', $valArray[$i]['C']);                    $optIndexedArray = [];  //to hold associated array options                    for($j=1;$j<=4;$j++){                        $optIndexedArray['opt'.$j] = $opt[$j-1];  //populate                     }                    $options = json_encode($optIndexedArray);                    //formatting answers                    $ans = $valArray[$i]['D'];                    for($j=1;$j<=4;$j++){                        if(Utility::equals($ans, $optIndexedArray['opt'.$j])){                            switch($j){                                case 1:                                    $answer = 'A';                                    break;                               case 2:                                    $answer = 'B';                                    break;                               case 3:                                    $answer = 'C';                                    break;                               case 4:                                    $answer = 'D';                                    break;                            }                        }                    }                                       //formatting answer in order                    $answerInOrder = $orderArray[$i];                    //formatting marks                    $mark = $markArray[$i];                     break;                 case 2:                     //formatting questions                    $question = $valArray[$i]['B'];                    //formatting options                    $options = '';                    //formatting answers                    $ans = $valArray[$i]['D'];                    if($ans === 1){                       $answer = 'true';                     }else if($ans === 0){                        $answer = 'false';                    }                                      //formatting answer in order                    $answerInOrder = $orderArray[$i];                    //formatting marks                    $mark = $markArray[$i];                    break;                case 3:                     //formatting questions                    $question = $valArray[$i]['B'];                    //formatting options                    $options = '';                    //formatting answers                    $ans = $valArray[$i]['D'];                    $ans = explode('//', $valArray[$i]['D']);                    $count = count($ans);                    $answerArray = [];  //to hold associated array answers                    for($j=1;$j<=$count;$j++){                        $answerArray['ans'.$j] = $ans[$j-1];  //populate                     }                    $answer = json_encode($answerArray);                                 //formatting answer in order                    $answerInOrder = $orderArray[$i];                    //formatting marks                    $mark = $markArray[$i];                     break;                case 4:                    //formatting questions                    $question = $valArray[$i]['B'];                    //formatting options                    $opt = explode('//', $valArray[$i]['C']);                    $optIndexedArray = [];  //to hold associated array options                    for($j=1;$j<=4;$j++){                        $optIndexedArray['opt'.$j] = $opt[$j-1];  //populate                     }                    $options = json_encode($optIndexedArray);                    //formatting answers                                        $optionsArr = explode('//', $valArray[$i]['C']);                    $ansArr = explode('//', $valArray[$i]['D']);                    $answerArray = [];  //to hold associated array answers                                       foreach($ansArr as $answr){                        $choose1 = false;                        $choose2 = false;                        $choose3 = false;                        $choose4 = false;                        for($j=1;$j<=4;$j++){                            if(Utility::equals($optionsArr[$j-1], $answr)){ //if options equals the respective answer                                switch ($j){                                    case 1:                                        if(!$choose1){                                            $answerArray['ans'.$j] = $optionsArr[$j-1];                                            $choose1 = true;                                        }                                        break;                                    case 2:                                        if(!$choose2){                                            $answerArray['ans'.$j] = $optionsArr[$j-1];                                            $choose2 = true;                                        }                                        break;                                    case 3:                                        if(!$choose3){                                            $answerArray['ans'.$j] = $optionsArr[$j-1];                                            $choose3 = true;                                        }                                        break;                                    case 4:                                        if(!$choose4){                                            $answerArray['ans'.$j] = $optionsArr[$j-1];                                            $choose4 = true;                                        }                                        break;                                }                                                            }                        }                    }                    $answer = json_encode($answerArray);                                      //formatting answer in order                    $answerInOrder = $orderArray[$i];                    //formatting marks                    $mark = $markArray[$i];                     break;                case 5:                    //formatting questions                    $question = $valArray[$i]['B'];                    //formatting options                                       $options = '';                    //formatting answers                    $answer = $valArray[$i]['D'];                                   //formatting answer in order                    $answerInOrder = $orderArray[$i];                    //formatting marks                    $mark = $markArray[$i];                     break;            }             //formatting passage            $passage = $valArray[$i]['E'];            if(!isset($passage)){                $passage = ''; //initializes passage to an empty string instead of its inital null value            }                    }